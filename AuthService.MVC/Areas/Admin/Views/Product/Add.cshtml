
@{
}

<h1 class="h3 mb-2 text-gray-800">Add product</h1>

<!-- DataTales Example -->
<div class="card shadow mb-4">
    <div class="card-body">
        <form>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" id="name" aria-describedby="emailHelp" placeholder="Product name">
                </div>
                <div class="form-group col-md-4">
                    <label for="code">Thumbnail</label>
                    <input onchange="handleChangeThumbnail(event)" name="thumbnail" type="file" class="form-control" placeholder="Category code">
                </div>
                <div class="form-group col-md-2" style="height: 100px">
                    <img id="thumbnail" src="~/img/best-product-3.jpg" class="w-100 h-100" style="object-fit: cover; border: 1px solid #ccc" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <label for="code">Detail images</label>
                    <input onchange="handleChangeThumbnails(event)" name="thumbnails" id="thumbnails" type="file" class="form-control" multiple>
                </div>
                <div id="thumbnail_container" class="form-group col-md-8" style="display: flex; flex-wrap: wrap;">
                    <!-- Thumbnails will be displayed here -->
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="code">Short description</label>
                    <input type="text" class="form-control" id="code" placeholder="Short description">
                </div>
                <div class="form-group col-md-6">
                    <label for="code">Price</label>
                    <input type="text" class="form-control" id="code" placeholder="Price">
                </div>
            </div>
            <div class="form-group">
                <label for="code">Full description</label>
                <textarea name="FullDescription" id="FullDescription" type="text" class="form-control" placeholder="Category code"></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Add</button>

        </form>
    </div>
</div>


<script>
    const handleChangeThumbnail = (event) => {
        const input = event.target;
        const reader = new FileReader();

        reader.onload = function () {
            const img = document.getElementById('thumbnail');
            img.src = reader.result;
        };

        if (input.files && input.files[0]) {
            reader.readAsDataURL(input.files[0]);
        }
    }
</script>

<script>
    function handleChangeThumbnails(event) {
        const input = event.target;
        const container = document.getElementById('thumbnail_container');
        container.innerHTML = '';

        if (input.files) {
            Array.from(input.files).forEach(file => {
                const reader = new FileReader();
                reader.onload = function () {
                    const img = document.createElement('img');
                    img.src = reader.result;
                    img.style = 'object-fit: cover; width: 100px; height: 100px; margin: 5px; cursor: pointer; margin-right: 10px; border: 1px solid #ccc';
                    img.onclick = () => removeThumbnail(img, file);
                    container.appendChild(img);
                };
                reader.readAsDataURL(file);
            });
        }
    }

    function removeThumbnail(imgElement, file) {
        // Remove the img element from the container
        const container = document.getElementById('thumbnail_container');
        container.removeChild(imgElement);

        // Remove the file from the input element
        const input = document.getElementById('thumbnails');
        const dataTransfer = new DataTransfer();
        Array.from(input.files).forEach(f => {
            if (f !== file) {
                dataTransfer.items.add(f);
            }
        });
        input.files = dataTransfer.files;
    }
</script>


<script src="~/admin/vendor/ckeditor/build/ckeditor.js"></script>
<script>
    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }
        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', 'https://localhost:44395/cloud-upload', true);
            xhr.responseType = 'json';
        }
        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }
        // Prepares the data and sends the request.
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }
    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your backend here!
            return new MyUploadAdapter(loader);
        };
    }
    ClassicEditor
        .create(document.querySelector('#FullDescription'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
        .then(editor => {
            window.editor = editor;
        })
        .catch(error => {
            console.error(error);
        });

</script>