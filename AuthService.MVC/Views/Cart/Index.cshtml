@model IEnumerable<AuthService.MVC.Models.CartItemViewModel>

@{
    var voucherList = ViewData["VoucherList"] as List<AuthService.MVC.Models.VoucherViewModel>;
}

<partial name="Components/_VoucherModal" model="@voucherList" />

<br />
<!-- Cart Page Start -->
<div class="container-fluid py-5">
    <div class="container py-5">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col">Products</th>
                        <th scope="col">Name</th>
                        <th scope="col">Price</th>
                        <th scope="col">Weight</th>
                        <th scope="col">Total</th>
                        <th scope="col">Handle</th>
                    </tr>
                </thead>

                <tbody id="cart-item-list">
                    <partial name="Components/_CartItemList" model="@Model" />
                </tbody>
            </table>
        </div>
        <div class="mt-5">
            <input id="selectedVoucher" type="text" class="border-0 border-bottom rounded me-5 py-3 mb-4" placeholder="No voucher was selected" disabled>
            <button class="btn border-secondary rounded-pill px-4 py-3 text-primary" data-toggle="modal" data-target="#exampleModalLong" type="button">Choose voucher</button>
        </div>
        <div class="row g-4 justify-content-end">
            <div class="col-8"></div>
            <div class="col-sm-8 col-md-7 col-lg-6 col-xl-4">
                <div class="bg-light rounded">
                    <div class="p-4">
                        <h1 class="display-6 mb-4">Cart <span class="fw-normal">Total</span></h1>
                        <div class="d-flex justify-content-between mb-4">
                            <h5 class="mb-0 me-4">Subtotal:</h5>
                            <p class="mb-0" id="subtotal">$0</p>
                        </div>
                        <div class="d-flex justify-content-between">
                            <h5 class="mb-0 me-4">Voucher</h5>
                            <div class="">
                                <p class="mb-0" id="voucher">-$0</p>
                            </div>
                        </div>
                    </div>
                    <div class="py-4 mb-4 border-top border-bottom d-flex justify-content-between">
                        <h5 class="mb-0 ps-4 me-4">Total</h5>
                        <p class="mb-0 pe-4" id="total">$0</p>
                    </div>
                    <a onclick="handleProceedChekout(event)" href="/Order/Checkout" class="btn border-secondary rounded-pill px-4 py-3 text-primary text-uppercase mb-4 ms-4" >Proceed Checkout</a>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Cart Page End -->

@section Scripts {
    <script>
        localStorage.removeItem("selectedCartItems");
        localStorage.removeItem("selectedVoucherItem");
        localStorage.removeItem("subtotal");
        localStorage.removeItem("userId");
        var seletedCartItems = [];
        var seletedVoucherItem = { id: 0, discountPercent: 0 };
        var subtotalElement = document.getElementById("subtotal");
        var seletedVoucherInput = document.getElementById("selectedVoucher");
        var voucherElement = document.getElementById("voucher");
        var totalElement = document.getElementById("total");
        var subtotal = 0;

        const handleChooseCartItem = (target) => {
            target.checked &&
                cartItems.forEach(item => {
                    target.value == item.productId && seletedCartItems.push(item);
                })

            !target.checked &&
                seletedCartItems.forEach((item, index) => {
                    target.value == item.productId && seletedCartItems.splice(index, 1);
                })

            localStorage.setItem("selectedCartItems", JSON.stringify(seletedCartItems));
            subtotal = 0;
            seletedCartItems.forEach(item => subtotal += item.quantity * item.price);
            localStorage.setItem("subtotal", JSON.stringify(subtotal));
            subtotalElement.textContent = '$' + subtotal.toFixed(2);
            voucherElement.textContent = '-$' + (subtotal * seletedVoucherItem.discountPercent / 100).toFixed(2);
            totalElement.textContent = '$' + (subtotal - subtotal * seletedVoucherItem.discountPercent / 100).toFixed(2);
        }

        const handleChooseVoucherItem = (voucherId) => {
            if (seletedVoucherItem.id !== 0) {
                var oldBtnChooseVoucher = document.getElementById(seletedVoucherItem.id);
                oldBtnChooseVoucher.classList.remove("btn-danger");
                oldBtnChooseVoucher.textContent = 'Select'
            }
            var newBtnChooseVoucher = document.getElementById(voucherId);
            if (seletedVoucherItem.id !== voucherId) {
                vouchers.forEach(item => {
                    item.id == voucherId && (seletedVoucherInput.value = item.name) && (seletedVoucherItem = item)
                })
                newBtnChooseVoucher.classList.add("btn-danger");
                newBtnChooseVoucher.textContent = 'Selected'
            } else {
                seletedVoucherInput.value = "";
                seletedVoucherItem = { id: 0, discountPercent: 0 };
                newBtnChooseVoucher.classList.remove("btn-danger")
            }
            localStorage.setItem("selectedVoucherItem", JSON.stringify(seletedVoucherItem));
            voucherElement.textContent = '-$' + (subtotal * seletedVoucherItem.discountPercent / 100).toFixed(2);
            totalElement.textContent = '$' + (subtotal - subtotal * seletedVoucherItem.discountPercent / 100).toFixed(2);
        }

        const handleProceedChekout = (e) => {
            if (seletedCartItems.length === 0) {
                e.preventDefault();
                alert("No cart items selected!");
                return;
            }
            localStorage.setItem('userId', JSON.stringify(seletedCartItems[0].userId))
        }


        function handleDeleteCartItem(userId, productId) {
            cartItemElements.forEach(item => {
                item.value == productId && item.checked && item.click();
            })
            $.ajax({
                url: `/Cart/Delete?userId=${userId}&productId=${productId}`,
                type: 'DELETE',
                data: null,
                contentType: false,
                processData: false,
                success: function (response) {
                    $.ajax({
                        url: '/Cart/GetAllCartItem',
                        type: 'GET',
                        success: function (data) {
                            $('#cart-item-list').html(data);
                            var selectedCartItemIds = [];
                            seletedCartItems.forEach(item => selectedCartItemIds.push(item.productId))
                            seletedCartItems = [];
                            cartItemElements.forEach(item => {
                                selectedCartItemIds.includes(`${item.value}`) && item.click();
                            })
                        },
                        error: function (xhr, status, error) {
                            alert('Error: 1' + error);
                        }
                    });
                    $.ajax({
                        url: '/Cart/GetCountCartItem',
                        type: 'GET',
                        success: function (data) {
                            $('#cart-count').html(data);
                        },
                        error: function (xhr, status, error) {
                        }
                    });
                },
                error: function (xhr, status, error) {
                    cartItemElements.forEach(item => {
                        item.value == productId && item.click();
                    })
                    alert('Error: 2' + error);
                }
            });
        }

        function handleUpdateCartItem(userId, productId, quantity) {
            var formData = new FormData();
            formData.append("userId", userId);
            formData.append("productId", productId);
            formData.append("quantity", quantity);

            $.ajax({
                url: `/Cart/Update`,
                type: 'PUT',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    $.ajax({
                        url: '/Cart/GetAllCartItem',
                        type: 'GET',
                        success: function (data) {
                            $('#cart-item-list').html(data);
                            var selectedCartItemIds = [];
                            seletedCartItems.forEach(item => selectedCartItemIds.push(item.productId))
                            seletedCartItems = [];
                            cartItemElements.forEach(item => {
                                selectedCartItemIds.includes(`${item.value}`) && item.click();
                            })
                        },
                        error: function (xhr, status, error) {
                            alert('Error: 1' + error);
                        }
                    });
                },
                error: function (xhr, status, error) {
                    alert('Error: 2' + error);
                }
            });
        }
    </script>
}