@model List<AuthService.MVC.Models.OrderViewModel>

@{
    var isCheckout = ViewBag.IsCheckout != null ? ViewBag.IsCheckout : "";
    var isCancel = ViewBag.IsCancel != null ? ViewBag.IsCancel : "";
}

<partial name="Components/_Notification" />
<div class="container-fluid fruite py-5">
    <div class="container py-5">
        <h1 class="mb-4">Your orders</h1>
        <div class="container">
            <ul class="nav nav-tabs nav-justified">
                <li class="nav-item">
                    <a class="nav-link" id="all-tab" href="/Order/Index">All</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="pending-tab" href="/Order/Index?status=1">Pending</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="delivering-tab" href="/Order/Index?status=2">Delivering</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="received-tab" href="/Order/Index?status=3">Received</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="cancelled-tab" href="/Order/Index?status=4">Cancelled</a>
                </li>
            </ul>
            <br />
            <ul class="list-group">
                @foreach (var order in Model)
                {
                    <li class="list-group-item">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th scope="col">@order.CreatedTime.ToString("MMMM dd, yyyy")</th>
                                        <th scope="col"></th>
                                        <th scope="col"></th>
                                        <th scope="col"></th>
                                        <th scope="col">
                                            @{
                                                if (order.Status == AuthService.MVC.Constants.OrderStatus.PENDING)
                                                {
                                                    <div id="status-@order.Id" class="text-danger">PENDING</div>
                                                }
                                                if (order.Status == AuthService.MVC.Constants.OrderStatus.DELIVERING)
                                                {
                                                    <div id="status-@order.Id" class="text-info">DELIVERING</div>
                                                }
                                                if (order.Status == AuthService.MVC.Constants.OrderStatus.RECEIVED)
                                                {
                                                    <div id="status-@order.Id" class="text-success">RECEIVED</div>
                                                }
                                                if (order.Status == AuthService.MVC.Constants.OrderStatus.CANCELED)
                                                {
                                                    <div id="status-@order.Id" class="text-dark">CANCELED</div>
                                                }
                                            }
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @{
                                        var total = 0f;
                                        foreach (var orderDetail in order.OrderDetails)
                                        {
                                            total += orderDetail.Price * orderDetail.Quantity;
                                            <tr style="height: 50px;">
                                                <th scope="row">
                                                    <div class="d-flex align-items-center mt-2">
                                                        <img src="@orderDetail.Thumbnail" class="img-fluid rounded-circle" style="width: 50px; height: 50px;" alt="">
                                                    </div>
                                                </th>
                                                <td class="py-4">@orderDetail.Name</td>
                                                <td class="py-4">$@Math.Round(orderDetail.Price, 2) / kg</td>
                                                <td class="py-4">@orderDetail.Quantity kg</td>
                                                <td class="py-4">$@Math.Round(orderDetail.Price * orderDetail.Quantity, 2)</td>
                                            </tr>
                                        }
                                    }
                                    <tr style="height: 50px;">
                                        <th scope="row">
                                        </th>
                                        <td class="py-4"></td>
                                        <td class="py-4"></td>
                                        <td class="py-4 text-primary">Total</td>
                                        <td class="py-4 text-primary" style="position: relative">
                                            $@Math.Round(total, 2)
                                            @if (order.Status == AuthService.MVC.Constants.OrderStatus.PENDING)
                                            {
                                                <div id="@order.Id" style="position: absolute; left: 120px; top: 18px">
                                                    <button onclick="handleUpdateOrder('@order.Id', 4)" id="btn-submit" class="btn btn-danger">Cancel</button>
                                                </div>
                                            }
                                            @if (order.Status == AuthService.MVC.Constants.OrderStatus.DELIVERING)
                                            {
                                                <div id="@order.Id" style="position: absolute; left: 120px; top: 18px">
                                                    <button onclick="handleUpdateOrder('@order.Id', 3)" id="btn-submit" class="btn btn-success">Received</button>
                                                </div>
                                            }
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

@section Scripts {

    <script>
        var btnError = document.getElementById("error");
        var btnSuccess = document.getElementById("success");
        const isCheckout = '@isCheckout';
        if (!!isCheckout) {
            toastDetails.success =  {
                    icon: 'fa-circle-check',
                    text: 'Place order successfully',
                }
            btnSuccess.click();
        }

        const handleUpdateOrder = (orderId, status) => {
        var formData = new FormData();
        formData.append("Id", orderId);
        formData.append("Status", status);
        $.ajax({
            url: "/Order/Update",
            type: "PUT",
            data: formData,
            contentType: false,
            processData: false,
            success: (response) => {
                toastDetails.success = {
                    icon: 'fa-circle-check',
                    text: (status === 3 ? 'Receive': 'Cancel') + ' order successfully',
                }
                document.getElementById(orderId).style = "display: none";
                if (status === 4) {
                    document.getElementById('status-' + orderId).textContent = 'CANCEL';
                    document.getElementById('status-' + orderId).classList.add('text-dark');
                } else {
                    document.getElementById('status-' + orderId).textContent = 'RECEIVED';
                    document.getElementById('status-' + orderId).classList.add('text-success');
                }
                btnSuccess.click();
            },
            error: (xhr, status, error) => {
                toastDetails.success = {
                    icon: 'fa-circle-xmart',
                    text: (status === 3 ? 'Receive' : 'Cancel') + ' order failed',
                }
                btnError.click();
            }
        })
    }

        // Lấy tham số status từ URL
        const params = new URLSearchParams(window.location.search);
        const status = params.get('status');

        // Xác định phần tử cần thêm class active
        const allTab = document.getElementById('all-tab');
        const pendingTab = document.getElementById('pending-tab');
        const deliveringTab = document.getElementById('delivering-tab');
        const receivedTab = document.getElementById('received-tab');
        const cancelledTab = document.getElementById('cancelled-tab');

        // Xóa class active mặc định
        allTab.classList.remove('active');

        // Thêm class active vào phần tử tương ứng
        switch (status) {
            case '1':
                pendingTab.classList.add('active');
                break;
            case '2':
                deliveringTab.classList.add('active');
                break;
            case '3':
                receivedTab.classList.add('active');
                break;
            case '4':
                cancelledTab.classList.add('active');
                break;
            default:
                allTab.classList.add('active');
                break;
        }
    </script>
}